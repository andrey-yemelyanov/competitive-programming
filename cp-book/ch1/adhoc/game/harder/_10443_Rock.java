package helvidios.cp.ch1.adhoc.game.harder;

import java.util.Scanner;

public class _10443_Rock {
	public static void main(String... args){
		String data = "2\r\n" + 
				"3 3 1\r\n" + 
				"RRR\r\n" + 
				"RSR\r\n" + 
				"RRR\r\n" + 
				"3 4 2\r\n" + 
				"RSPR\r\n" + 
				"SPRS\r\n" + 
				"PRSP";
		String data2 = "1\r\n" + 
				"100 100 99\r\n" + 
				"RSPPSSPPRPSRRRSRPPSSPRSRPRSSPSPPRRSSRPPPRSRSPRPSPPRPPPSSPSRSRRPRSSRRPRRPPSPPPRRSSRRPRRSSSRPSRPRRRRRP\r\n" + 
				"SPRPSRPPRPSRPSPPSRSSRPSSPSRPRPPRRPPSRSPPSSSSPPPRPSSRPPPSRPSRRSSPSSRRPSRSSSRRPSPRPRPRSPRSRSRPSRSRSSPS\r\n" + 
				"PSRPRPRSSPPPRPSRRRRPRRPRSSSRRRRSRPPRSSPRPPPRPPSSSPSRPPSSPRPRRSRRSRSRRRRSPPRSRRRRSRPRPSRRSSRPPRPPPSPS\r\n" + 
				"PSRSRSSRPRSSSSRSSRRPPSSRPRRPRPRPRRRPPRRPSSPPPSPSRSRSSPSSSSPPPSRSRSRRPRPSSRSPRSSSSPPRSRRPSRSRPRSRPPRS\r\n" + 
				"SPSPPRRPRPRPRSPPSSRRSRSPRPPSRPSSSPSRPPSRRPPRRPPSPPPRPSPPPSPPRRRSPRRRPRRSRPPPSPSRSSRRPRSPRRSRPRRRSSSP\r\n" + 
				"SSPRPPRPSRSSRSRSPSPSRRRRRPRRPPRRSPPRRPPPPPPPPPSSPRRPRSRPRPRPPRPRSRPSRSSSPPPSSSSSSRSRPRRPPSSSPPSRPPPR\r\n" + 
				"RSRSRPSSPSSPPSRPPSRRRPRRSPSPSSPSSRRPPRPSPPSRSRSPSSPSPRPPRSPPRPPPSPPSRRPRRRSSSPRSSPRSSSPPPSPSSSSPSRRP\r\n" + 
				"PRSRPPRPSSRSRRSRRPRPRPSSSRRRRPSRSSSSSSRPPSRSSSSPRRSPPPSRSSPSPPPPPSRRRRSPRPPSRRPPPSPRSRPPSSRSPRRPPSRP\r\n" + 
				"PPSRSPPSRRPSPRRPRRPRRRSSSPRSRRPPSSPSRPPSPPRPPPRPRSPSSPPRSRPSPPPSRSPRRRPSPSSRPPSSRRPRRPRRPSSRPSSSRRSP\r\n" + 
				"SRRRSRRSRSSRRRRSPPPSPRRPRPSSRSPRSPRSPSRSPSRSRPRRSRPSSPRSPPSPPPPSSPSRRSRPSSPSPRPPRSPPPSPPRPPSSPRRPSPS\r\n" + 
				"RRSRSPSPPPPPPPSSSPPRSSPPRRSRSRSSSPSSRRPRRPSSRPRRSPRPSSPSPPRSRRSPRRPPRSSSSRRRPPSSPRRSPSRSRRPRRRPRRPRR\r\n" + 
				"SRSRSSPSPPPPSPSPPRRRRPPPSRSRSRSSPPSSSPRPSSPPRPSRPPPSRSPRRRRPRSRSRPPSSSRSRPRPRPPRPRSPSPRRSSSSSSRPSPRP\r\n" + 
				"SRRPRRSRRRPRSRRSPSSSRRSSSSRPPSPPPPRSSSRPPRRSRPPRSPRSSPRPRPRPRRPPRPPSPSSSRPPPRRSSSRSSRSRSRRPRRSSSRRRP\r\n" + 
				"PRPPPRSPRPSRRRRSRRSPSPPSSRRSPRSRSRSSPSSPPSRRPRRRRSRRPPSSRSRSSPRPPPPPRRPRSPPSRPPRRRRSPSSRSPSRSPRRPSSP\r\n" + 
				"RPSSPSSRRPRSSSSSSSPPSSRRRSPRPRPPPSRRPPRPRPRPRPRSSRPSPPSSPSRRPPRSSPPSPRSSPSPRSRPPPSPRSSRSRPSRRSSPSRSP\r\n" + 
				"RPRPSSPRPPPPSPPSPSRSSSPRPSRSPRSRPSRPPSSSSSSSRSSSPPSSSPRSPPPSRSRPRSSPRSPRPPPRRRPSSRSPRSSRRPSRSSPSPPRP\r\n" + 
				"PPPRSPPSSPRRRSPPPSSRPRRPPRSPPPSPPSSRPRRSRSRPRRRPPPSPPRSSSSPPPPRSRRRSPRPPSSSSSPSPRSSRRSPSPPSPSRPPRRRR\r\n" + 
				"RRRRPPPRSPPRPRRPRPPPSRRRRSSRSRRRPPPSRSRSRSRPPSRPSSPRRRSSRRRPPRSSPPRPRRRPPPPPRSSSPSRSPRSRSPPPRPPRSPPS\r\n" + 
				"SSSRSRSSRRSPSSPSSPRPSSRPSSSSRPRPPSSRRSRSPRRSRSRSRSRPPRRSSRPRSRSRPRRPRRSRRSPPPSPRPPPRPSPRSRRSRSRPPSRR\r\n" + 
				"RSRSRSSRSPSPRRPRSSPPPSRRPRPPSSSSSRRPRPPPSPPRRSPSPPSSSSRSSRSSPPRSPPRSSSSRRSPSSSRSSRRPRPSSSRRSRRPPSSRS\r\n" + 
				"SSSRRRPSPPRPRSSRPRRSSRRRSPPRPSSSPRPSSSPSRSRPSRRPPRRRSPPPPRPPSSRRPPRSRRPSRPRSRPSPPSRSRPPPSPSPPSPPSRSS\r\n" + 
				"RPRPPRSRPPSSPPSSPPRSRPPRPPPRSPRSRRPRRPPSPRPSSRRSRRPPRSSPPPSRSPPSPPPRRPPSRPSSRRSSPPRPSSSSPRRSSRPPRSRR\r\n" + 
				"RSSRRPRRSSPPSSRPSRRSSSRSSSRSPPPSRRPSRPSPPPSSRPSSRRRPRRPRRPSRSPPRSPSPSSPPRSSPPSRSRPRPRSSRRSSRRPPRRRSS\r\n" + 
				"RSRRSRSSPRSRPRSSPPPSRRRPSRSPSPSPSRSRSSPSPRPSSSPRSPSSRSRSSSRRPSPSSPSRSSPSRPSRSSRPSPSRPPPSPRSRPPPPRSPS\r\n" + 
				"PSPSSRPSRSPSPRPSSRSRSSRPRSSSRSRSRPRRRPSSRRRRPSPPPSPPPPRPPRPSRPRPPRRPPPRRRSPRSRPRSPRRPPRPPPRPRSRRRPPP\r\n" + 
				"RRPPRRSPPSPSRRRPPPRPRPPPSPRSPPPSPRRSRPSSSPSPPRSPSPPPSRPPPPRRPPSRRSSSSRRRPRRPPPRPRSPRSPPSSRSPPSPRPRSS\r\n" + 
				"SRSSSSPPPRRPSRPRSPSPSPRPRSRPRSSSRPSPRRSRSPSPSSPSRSPPPRRSRSSRSPRRPRPRPRPSPSPRSSRPRRRPSRRSPPSPSPSSRSRR\r\n" + 
				"SSPRSPRPPRSSRPSRPPSSSPRSSRSRRPSSPSSSRSPSPSPPRPSSSPSRSSRSPPRRSPPRSRRRPSRSPPPSRRRSSRSRPRPPPPPSPSPPSRRP\r\n" + 
				"PPRRPSPSPSSSRRPRSPSSPPSRSRPPRPPPPPPRSPPSPRRSRSPPPSRRRSRPPSRPRPRPRRRSPRPRSSSSPSRPRPPSRPRRSSPSPPSRRSRR\r\n" + 
				"RPRPSRRPRRPPPSSSRSRRRRRRPPPPSPSSRSRPSSSPPSRRSRSSPPSRRRRPPPSPRPPPRSSRSRSSRRPRSRPPSSPPSSSPRRRSSPPRRSRP\r\n" + 
				"RPPRPPPPPRSSPSRRPPSSPPPSPPRPSPSRRPPRSPRSPPPRSSSRRPRPRRRPSPPSPPPPSSRSSSPRPRRPPPSPSSPSSRSSSRRPSPRPPSPR\r\n" + 
				"PRPPSPSSRPPPPSRSSSRRSRSSPRPPSRPRPPRRSPPSRPPSPRPRPSRPRSRPSRPSSPSSPSRRPPSRSPSSRRSRSRSSSPSPRPPSSPPRSRPS\r\n" + 
				"SPPRRPPRSRSPRPRSSPRRPRPRRRSRRPSPRSPPSPRSSSRPPRPRPSRRPPRRSSPRPRPPPRSRRRPSPSPSPRPPPPRPSPSRPSSRRSRSSRRP\r\n" + 
				"RPSPSPSSPSSPRPPRSRRPPSSPPRSRPRSPSPRRRSRPPRSPPPSRPSRSPRRPSRRRSRSRPSSPRRSRPRRPPPRPSPRPRPRPPRSSSSRSRPRS\r\n" + 
				"SPRSSPRPSPSSSSRRSRPPRPRPSPRRRRPSSSSRSPRRSRSRRPRPSSPSSSRPRPRPPRSSPSRSRSRRSRRPSRRRPRRPRPRPRSSRSSRPSPSP\r\n" + 
				"SSRPSSPPSPPSRPRSSSSRPSRSPRSRSPPPRSPSPSRPPPPRSPRPPRRPSPRPSSSSPPSSSSSRRRSSPPRSPSPSPRSSPRPRSPPRPRPSSSRR\r\n" + 
				"SPRRPPPSPPRRSRPRPSSSPRRRRRRRRSPRPSSSPRPPRSSPRPPPSPRSRSPRRSSRRSPRRSSPPSPRSSPPRSRSPPPPPPPRRSSRPRPRPRSP\r\n" + 
				"SSRRPRRRSSRPPSRSSRRSRPRPPRRPRPSPSPSPSRSPSPRSPRRSSRSRRPPRRRRRPPPPSRRPRSPSPSSSSSSPPSRSRSPPPRPPSRSPSPPR\r\n" + 
				"PSSSRSSPSSPPRRRPRSRPPSRPSSPSPSRPPSSPRSRRPPSSSSPSRPRSPRRRPRRPPSRPSRRRRPPSRPPPRRPRPRSPSPRRSPRSSRRSSPSP\r\n" + 
				"SPRSSSSRRRPRSPPSRSRRRRPRRRPSSSRPRRSRPSRRPPRPRRRRPPPPPRRRSSRPRSPPPSSPRSSPSSSRPPPSPRPRRPPSSPPRRSPSPRPP\r\n" + 
				"PPRPSRRSRPSRRPRRRPSSSSRRSPPSSPSRRPSRRPSPSPRSSRSRPRRPRPRPPSRSRRSSSRPPPRRRSSPPPRRRPSSPRRRSSPRRPPPPRSPS\r\n" + 
				"RPPPSPSPSRSRRRPPSSSRPSPSRPRSPPRPSPRPSRRSSRRPSSSPSRSPPRPPSRSPPSRRSPRPRSSRRPSSPPPRRRSSSPSPPRSRSSRRRRRP\r\n" + 
				"PRRPSPPPPRSPRPSSRSSPSRSRPSPRRPRPPSSRRRPRSSPPSPPPRRSSSSPSRPRPSRPRRRRSSPPPRPSPRPPPRPRPPPPPRRSRPPPSSPRR\r\n" + 
				"PPSPRRPRSPRSSSRRSPSRRSSSPRSPRSSSSSRSPSRPSSSPSPPSRPPSPRPPPRRRSPRRPRSRPSSSSSRRRPPPRRSSPPSRSPRPRRPSRRPS\r\n" + 
				"SRRRPRPRPPRRRSRPSSRPRRRRPSRRSSRRPSRPRPPSPPRSPRSPRSSRRSPPPSRSPRSSRRSSPSPRRSPPSRPSRPPRPPRPSSRPRRPPPSRP\r\n" + 
				"RRPRSPSSSPSSPPRPRSPRRRSRSSSRRRPRRPRRSSRSSSPPSRSPPSSSRRSRPRSPSSPSRPRSPRRPRSRPRSSSRPSRSPPPRSRSRSPRPSPP\r\n" + 
				"RPPSPSRSRPSSPPSRRSRSRSRPRPSRRRSPSPSSPSPRRRSSRRSPSSSPRSSSPPSRPSPSSRRSPPSSPRSRRRPRSSRPRRPPSPRPSRRRPSRS\r\n" + 
				"SSSSPPRRRSSRRRPRSSRPRPPSSPSRSPSPRRRRPRPPRPSPRSSSPRSSPSSRSSRPSPPSSRPPPSRPRPRSRPSSPRPSPSPSRSRSPPSPRRPR\r\n" + 
				"PSSSRRPRSPRPRPRPSSRRRPSRRPPRPSRRPSSPSPSSSPSPPPSPPPSRPSSRSPSPPSSRSPRSRPSPRPPSPSPPRPPSSRRPRSSPRSRSSSRS\r\n" + 
				"SRRPRPSRSRPSRPRPRPSSSSPSSPPRRPSRRPSRPSRPPPRRPRSRSPSRPRPRSPPRPPSRSRSRPSPRRSPSPSRSRPPRSRPSSRPSPPPRPRSP\r\n" + 
				"PPPSRPPRPPRPSPPSRPSSSSPRPRSPSSSRPSPPSSRPRPPSPSSPRRRPRPPSRRRPPRRPSRSPPSPPSSPSSPRSSPSPPSPPRRRPRRPPSSSR\r\n" + 
				"PRPRSRPRRSPPRSPSSPSSRSSRSSPRSSPSRRPRPSPPRPRPPRPRSRPSRSSSPSRPPRSPPSSSRRSRPRPPRPSRPRRRPRSSRSRSPPPPRRSR\r\n" + 
				"PPRPPRSSSSRSRPRSSPPRSSPPSSSPRPSRRSSPPRPPSSPRRRSRRPRSPSPPRRSPPPPSPRPPSPPRPSRRPRRPRRSPSSRRPSRSRPPPRPRR\r\n" + 
				"RSSPSRSSRRRSRSRRSSRPPSRRSPSSSSRSSRRRPSSRPSPRSSSRSSPSPSSRSRRSRRPRSPRPSRPRPPSSSRSRPPSPSPPPRRPPSSPPPRRP\r\n" + 
				"RSSRPPPPSRPRRSRRSPPRPPSSSPPPSPRRSSRRRPSSSRPPSRPSSPSSSRRSPSPPSRRSRPSRRRSSRSPRRSRPRSRPPSRSSSPSRPRRRPSP\r\n" + 
				"PSSRSRSRPSSSRRRPSSSSSPRRSRSPRPRRSSSSPSPPPSRPSPPSRSSRRPRPRRSPPSPSRPRSPRSPSSSRPPSSRRRSRRSSSPRPSPRRSRPR\r\n" + 
				"RSRSSPRPRPSRSSSSPPPSPRPRPSSPPRPSPRPPSSSRSRRPRSPPPRSPSSPSRSSPRPPSPRRSSRRSSSPRSSPPPSSPRSSSSSRRPSRRRRPS\r\n" + 
				"PSSSRRSRSSRSPSPRSPSRSSPRSRPPSSPSSSSPPPRSPPRSSPRRPSRRRSRSSRPRRRRSSSRPRPSRRPPRRSSSRRRSPSSRSPSRSPRRPSPR\r\n" + 
				"RRRPPRPPRSPPPPSRSSRPPRSRRSPPSRPRPPPPRPRPRSRSSPPSRRSPPPPRPPPPPPSSRRRRSRPSSRRSRRPPPPPPPSPPSPRSSPSPSRPS\r\n" + 
				"SRSRSSPPSSRSRPPRSSRPPPPSPSPPRRPSRPSPRSPRRSPSRRSRRPRSSPPRPPRSSRPSRSSPRRRRRPSSRSRPPPSSSSRRSPPRRSRSPPSP\r\n" + 
				"SRRPRSSRPSPRPPPRRSSSSSRRRSRRSRPRSRPSSSRSRRSSSSPSSRSRPSSSRSPPRRRPSSPRRSRRRRPRPSSSRSPRPSPSSSSRRRRRRSSR\r\n" + 
				"SRPPPSSPRRPSRSSRSRPSPRPRSRPPSSPRSSPSPRSRSPRSRSSPPSSSSSRPSRSRSPPPPPPPRRPPSSSPSSRRSSRSRRSRRSRRPRPRSSPP\r\n" + 
				"RRSRSPPPRPPRRRRSSSSRSSRPSSRRPRRSPRSSPPPSSSPPSRSRRRRSSRPPPRPRRRSPPSRRPSPPSRPRSSPSPPRPRPSRRPRRPPRRSSRR\r\n" + 
				"PRSSSSSSRSSSPRSRSRPPRSRSSPSSPSPSRSSPSSPPPPRSSPPRPSRRSRSPPRPPSSRPPPRSPPPRSPRSPPRPPRPSRPRSPSRSPPRPSPRR\r\n" + 
				"SSRSSPSSSPPSSSPPRSSPSPRPPPSSRPPPSPSSSSSPRRRPSSPSSRRPSPPPRSRPSRSRSRPSSPRRSRRSRSSSSRSSRSSPRRRPPPRPRSSR\r\n" + 
				"RPRPSPRSRPPRPPRRRSSPRSPPSSPSRRPRRSRRSRSSSSPRSPRPRPRSRPSRPPRSSSSPSRRRSPRRSRRSRSPSRPPSRRSPSPPRSSPRPSRR\r\n" + 
				"RPRRPRRPSRSSPPRSRPRSRPSSSPRPPSPSRRRSRPRSRSSRRRSPPSPSSRSRRRRRPPRSRPPRPSPSSPPPRRRSRPRSRRRPPPPSRPSPSRPS\r\n" + 
				"RPSPPRPRPRPRSSPRPPRPSPRRSRSPRPPSSSSSSSRRRRSSRPSSPRSPRRRRRRSRPPPRPRPPSRRPPSPPRSRPRRSSRPSSSPSSSPSSPSSP\r\n" + 
				"PPRSSPPRPRPPSSRRSSSRSRSSSRPSRPRPPSSPRPRSSSRSPSSRSPRRSSSPPRRPRPSPSPPRSRRSPSRRRRPPRRPSPSRSSPSRPRPPSSPS\r\n" + 
				"RPSRPRRPRPSSSPSPSPPRPSSSRRSPRRRPPRSRPRRPPSPRPRSRSSPRRSRRSRRRSSPRPRPPSSPRSSRRSSRPSRPPRPPRSSPSSRPPPPSS\r\n" + 
				"RPSPRPSRPSSRSPSRRSPSPRSSPSPPSSPPSRRSSPRSSSSSPPPPPRRPRPRSPRPSSPSRRRSPPSPSRRPRPSPRPSSRSSRPSPPSSPPPRRSR\r\n" + 
				"SSRRSPPPRPPRSPRPRRPSSSRPSRSSPSRRSRPRRPPPSRRRRSSSPPRRPRPSRPPPPRSSPSRRRPPPRPRSPRRRPRRSSPRPPSSSPSRSSRPP\r\n" + 
				"RPPSPRRPPSRSRPRPRPRSSRSPRPSPSRRSSSPSSPSRRRRRRRPRPPRRSSSPRPSSPSSSSSPSRRPPPRSRSPPSPPRSRRPSSRSRRPPRSRPP\r\n" + 
				"PRPPSPRRPSPRSSPSRSRRRRPSPSSRPRRPPPPPSRSSRPSPRSSRPRPRSRSRRPRPSSRSSRSPRPSRSRRPSRPSRSSSRRPRSRPSSSSPPRRP\r\n" + 
				"RRSSPSRSPPPRSPPSSRRSSRSSPSSPRPPPPSPPSRPRRPRSSPRRSPRSPPPPSRSPPPSPRPRSPRPPPPRPPSPRPRRPSPRPSSRRRRSRSRRS\r\n" + 
				"RSSPSPRRSPRRRSPPPRSRPRPRSPRSRSRSSSPRSRPSPSRPSSRSSSSRSPPPSRSRSSRPPRRRSSSPRPRSSSPRRRPPSSSRRPSRPRRSSSSP\r\n" + 
				"SPRPSSRRPSPPPRSRPSSSSPRSPRSSPPPPRSRSPRRRRRSPPRRRRSRRRPRPSRPSRPSSSPSSPRPRSRSPRPSSSRRSPPSRSRPPRRSSRPRR\r\n" + 
				"SPSRPSSPRRRRSSSRSRPPSSSPSPPPRSSRPPSRRSRRSRRPRSSSRPSRRRPSRPPSSPPRPPSRPSSSSSPRSSSPSPRRPSSRSSRPRPSSSSSR\r\n" + 
				"PSRSSPSRSPSRRRPPSPPPPSPPSSSSRSPSSRSPRPRPRRSRPRPRSSSRRRSRPRSPPRRSPSPRPSRSRPSSPSSSPSSPSRSRRSPPPSRSRSPR\r\n" + 
				"PPRPPPPPRSPRSSSPPRPRPPRPSRRRPRRRPRRPRRSRRPRSRRRSPRPPRPPPPRSPSSRSRPRRRSRPSPPRRSPPRRSRSPRPPRSPSSPPRPPP\r\n" + 
				"PPSPPRSPSRSPRSPSPPPRRRSPSPRRRSSSRRPSSPRSSPPRSRPRSPRPSSRPSRRSPSRSSPRSPRPSRSSRRSRPSRRRPRSRRSRRPPSSRRSS\r\n" + 
				"SPPPRRRPRRSRRPRSPSRSSRPSRPSPSSPRPRSSPSRRSRRSSPPSSPRRPRPPPRSSRSPRSPPRRRSRPPRPSPRRPRRRSPRPRPRSRPPSPPRP\r\n" + 
				"RPSSRSRSSSRRSSSSPRPRPSRSPRRRRRSSRRSRRSSPPSSSRSSRSSSRRRRPRSSRRSSPPRPPPSSPSSRSRRRSRSRRRRPPPRSRSSSPPPPR\r\n" + 
				"PSPSPSPSSSSPSPPSSSSRRRSSRSRSSSRRSSRSSPPSPPRRRRSPSRSRRSRPSSRPPPPPSRRRPSSPRRRRPSRSSPSSPSPPPPRRPRRSSSPS\r\n" + 
				"RSSSPRRRSRPRSRRRRPRPSSRSRPRSPSSRSPSSSSSSRRPRPPRSSRRPPSSSPSRRPPRRPSRRSRPRSPRSPPRPPSRPPRRRSPRPSSSPSRRR\r\n" + 
				"PSRRRSRRPPPRPRRPRPSPPSSPPSSPRSSSRPSRSRSRPRPRRSRPRSRRRPRPSRRSSSRRRPRPPRSRRSRRSRPPPRSSPPRSPRRRPRPPSRRS\r\n" + 
				"PPRSPPRRRSPSRSPRSPRPPSRRPSSPPRPRRSRPSSSRRPRPSRPSSSRSSPRPPPPPRPRSSSRRSSPPSPPRRRRPSSSSPSSSSPSPRRPSPRPS\r\n" + 
				"RPRRPRPPRRRPSPRRPSPSRRSRPPRRPPPSRRSSRRRPRSPRRRRRRPPRRSPRSSSRPRRRPPSPPRRPSPSRPPSPPPSSRPPRRPSPPRSRRPRR\r\n" + 
				"RSRSPSSRRRPSSSRSPPRSRSRSPPRRRSPSSSRSPRSRRSPSPSSPSSSPRPPSPRSSSPSRPRRRRPRRSPSRPSRRSSSPSRSSRPPPPRSPSSPP\r\n" + 
				"PPSRSPRRPSPRRRSRRPSRSSSRPPSSPRSRPPPSRPPPRRSSSPSPPPRPPRSRRRSRSRPRSRSPPRRSPPRPPSSRPSRSPSPPPPSSSSRPRRRR\r\n" + 
				"SRPRRPRRSPRRRRRSRRPRPPPRRRSRPSPSPPSSPPSPPPRRRRRRRPRPSRSSPPPPRRRPPRRRRRSSPRSSPPPPRRRSSRSSPPRRPPPRRPSS\r\n" + 
				"SPSPPSRRPSRRPRPRSSRSRSSSRPRRPSSRPSRPRRRPPPRSPPPRPRRPSRSRSSPRRPPPSRRSPPRRRSSSPSPRPSRPPSPRSPPSSPSSPSRR\r\n" + 
				"PSSRPPPSSSSRPSRRPSRPRRSRRPRSRPSSRSSPSPPRPPSSRSSRPSRSSPSPPPSRRPRRPSSSRRSPRPRRRPSPSRRPRRSPSPSPSPRPSRPP\r\n" + 
				"RRPSSRSSPSRPSRRSRPRPSSSSRPRSRSRSPPPSSSRRSRPSRSRSSPPRRRSRSSPRRRSRPSPRSSSSRPPPRRPSRSSPSSRSRSPPSPRPPPSP\r\n" + 
				"PPRPPRSPPSRPRSRRRRSRRRPRPSPRRRPPRRPRPRSPRPSPRSPRSSSPSPRRPPPSSPRPPPRPPSPRPSSRPPRPPSSSSRPRRSPSRRSSPSRP\r\n" + 
				"RRPPSRPSSSSRSPRPSSSRSRPSRRPPRPSPRRSPSPSPPPSSRSRRSSPPPPRPPPSRPPPPSPSSPRSSSSPSRPRRPSSSRSSPSRPRRPRRRRPS\r\n" + 
				"SRRSRSRRPRPPPPSPPSPRSSRRRSRSPSSRRPPRPPSSPPSSRPPSSSPRRPSSSSRRRRPRPSSPRPSRPPRPPRRPPSSRRSSRSPRRPPPPPSRR\r\n" + 
				"PPRRRRPSSPSPPPRPRRSSSPPPPRSRRPPPPSSPRPRSRRSSPRRSSSPSPSRSSRPPRPPSSRRPRSSRSRPPPRPSSRRRSRSSPSSPPPRSRPRS\r\n" + 
				"PPRPSSPSPSRRRRSRRPSSSSRSRSSSPRSSRRSRPRRPPPSPRRSPSPSSSRSSSRSSRSSPSPRRSRSSRPRSPSRRRRPPSRPPSRSPSRPRRRPP\r\n" + 
				"RPPPPPRSSRPSRRRRRSSRSSPSPRSSPSPPSSPSSPPPPRPRSPPRRSRRSRPRPPPSPSSRPSRRRRPRPSRPSSPPSPRRRSPPPPSRPPPPPSPR";
		String data3 = "1\r\n" + 
				"100 1 90\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"P\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"R\r\n" + 
				"P\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"S\r\n" + 
				"P\r\n" + 
				"P\r\n" + 
				"R\r\n" + 
				"S";
		String data4 = "2\n"+
				"1 1 1\n"+
				"R\n"+
				"2 2 2\n"+
				"RR\n"+
				"SS";
		Scanner scanner = new Scanner(data2);
		int nTestCases = scanner.nextInt();
		while(nTestCases-- > 0){
			int nRows = scanner.nextInt();
			int nCols = scanner.nextInt();
			int n = scanner.nextInt();
			char[][] grid = new char[nRows][nCols];
			for(int row = 0; row < grid.length; row++){
				String line = scanner.next();
				for(int col = 0; col < grid[0].length; col++){
					grid[row][col] = line.charAt(col);
				}
			}
			grid = runSimulation(grid, n);
			System.out.println(printGrid(grid));
			if(nTestCases > 0){
				System.out.println();
			}
		}
		scanner.close();
	}
	
	public static char[][] runSimulation(char[][] grid, int nDays){
		while (nDays-- > 0) {
			grid = wageWar(grid);
		}
		return grid;
	}
	
	public static char[][] wageWar(char[][] grid){
		char[][] newGrid = new char[grid.length][grid[0].length];
		for(int row = 0; row < grid.length; row++){
			for(int col = 0; col < grid[0].length; col++){
				if(grid[row][col] == 'S' && hasNeighbor(grid, row, col, 'R')){
					newGrid[row][col] = 'R';
				}
				else if(grid[row][col] == 'R' && hasNeighbor(grid, row, col, 'P')){
					newGrid[row][col] = 'P';
				}
				else if(grid[row][col] == 'P' && hasNeighbor(grid, row, col, 'S')){
					newGrid[row][col] = 'S';
				}else{
					newGrid[row][col] = grid[row][col];
				}
			}
		}
		return newGrid;
	}
	
	public static boolean hasNeighbor(char[][] grid, int sourceRow, int sourceCol, char neighbor){
		// check up
		if(sourceRow - 1 >= 0){
			if(grid[sourceRow - 1][sourceCol] == neighbor) return true;
		}
		
		// check down
		if(sourceRow + 1 < grid.length){
			if(grid[sourceRow + 1][sourceCol] == neighbor) return true;
		}
		
		// check left
		if(sourceCol - 1 >= 0){
			if(grid[sourceRow][sourceCol - 1] == neighbor) return true;
		}
		
		// check right
		if(sourceCol + 1 < grid[0].length){
			if(grid[sourceRow][sourceCol + 1] == neighbor) return true;
		}
		
		return false;
	}
	
	public static String printGrid(char[][] grid){
		StringBuilder s = new StringBuilder();
		for(int row = 0; row < grid.length; row++){
			for(int col = 0; col < grid[0].length; col++){
				s.append(grid[row][col]);
			}
			if(row < grid.length - 1){
				s.append("\n");
			}
		}
		return s.toString();
	}
}
